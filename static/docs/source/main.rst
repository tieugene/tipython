*********************
Basic systems
*********************
Описание основных механизмов работы системы Lansite

History System
==============
История изменения Свидетельств.

Basis
-----
Суть работы истории заключается в создании, так называемых, снапшотов (snapshot) - копий свидетельства.

Снапшот создается автоматически при приостановке/возабновлении работ.

Он содержит всю информацию оригинала со следующими изменениями:
    * Дата изменена на дату "с". Тоесть указанную начальную при приостановке или текущую при возобновлении
    * Протокол изменен на Протокол Дисциплинарной Коммисии, указанный при сохранении изменений
    * В поле даты в видах работ внесены соответствующие изменения

Representation
--------------
При просмотре свидетельства отображается информация оригинального свидетельства и список работ последнего снапшота.

В разделе "История изменений" можно просмотреть отличия снапшота от оригинала, а так же последовательный список изменений от любого до любого снапшота.

.. note::
    Не соответствует действительности. Артем занят перекраиванием представления.
    


Edit
----
Существует функция "отката", которая удаляет все снапшоты, сделанные после данного.

Implementation
--------------
Был написан специальный класс-контейнер кода для работы с историей - :py:class:`~sro2.views.History`. Для того чтобы начать работать с историей требуется инициализировать этот класс:

.. highlight:: python

>>>  orgsro = OrgSro.objects.get(pk=id)
>>>  history = History(orgsro)

.. autoclass:: sro2.views.History
    :members:
    :undoc-members:

    .. autofunction:: sro2.views.__cmp_stagelists

OrgSro status system
====================
Статус организации в нашем СРО.

Basis
-----
Статус организации в СРО хранится в поле *status* модели :py:class:`~sro2.models.OrgSro`.

Возможные значения:
    * **0** -- *Статус отсутствует*. Организация добавлена в систему, но работа с ней еще не началась
    * **1** -- *Кандидат*. Организации добавлено Заявление
    * **2** -- *Член СРО*. Организация яыляется полноправным членом
    * **3** -- *Исключен*. Организация исключена из СРО

Другие важные поля:
    * *inprotocol* -- models.ForeignKey(Protocol) -- **Протокол-основание принятия**
    * *exprotocol* -- models.ForeignKey(Protocol) -- **Протокол-основание исключения**
    * *reason* -- models.ManyToManyField(Reason,through='OrgReason') -- **Причина исключения**
    * *excludedate* -- models.DateField -- **Дата исключения**

Representation
--------------
Статус обозначается соответствующей плашкой в разделе СРО при просмотре данных об организации.

Так же вывод плашек с возможностью сортировки производится и в списке организаций.

Edit
----
В просмотре организации рядом с плашками находятся соотвектствующие контексту кнопки управления статусом. Исключение составляют организации не имеющие статуса -- статус *Кандидат* устанавливается при добавлении первого Заявления.

Implementation
--------------
Функции изменяющие статус организации:
    * :py:func:`~sro2.views.orgsro_to_candidate`
    * :py:func:`~sro2.views.orgsro_to_member`
    * :py:func:`~sro2.views.orgsro_to_excluded`
    * :py:func:`~sro2.views.orgsro_return_member`
