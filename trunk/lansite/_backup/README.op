== Log =
Addition tables:
	* objectpermissions_userpermission
	* objectpermissions_grouppermission

== Installation: ==
	1. add 'objectpermissions' into settings.py INSTALLED_APPS
	2. Add to each wanted model:
		Meta:
			permissions = (
				("can_read", "Can read ..."),
				("can_chmod", "Can chmod ..."),
			)
	3. syncdb
== Usage ==
	1. models.py:
		import objectpermissions
		permissions = ['view', 'add', 'change', 'delete', 'chmod']
		...
		objectpermissions.register(<model>, permissions)
	2. admin.py (can change "Tabular*" into "Stacked*"):
		from objectpermissions.admin import TabularUserPermInline, TabularGroupPermInline
		...
		class <modelname>Admin(admin.ModelAdmin):
			...
			inlines = (..., TabularUserPermInline, TabularGroupPermInline)
	3. views.py:
		from objectpermissions.decorators import permission_required
		@permission_required(...)
	4. templates/*:
		болт
== Resume ==
Notes:
	* значения permissions не записываются нигде, поэтому их интерпретация - целиком на коде
	* действительно пишутся в виде бит: объект_юзер = 1 запись в *permissions.
Достоинства:
	* можно зарегить одну пачку permissions на всех
	* есть декоратор (1 шт)
	* куча функций проверки прав
Недостатки:
	* надо регить permissions для каждой модели (хотя - логично)
	* object_id: null=False => права на модели надо проверять сомостоятельно
	* нет ни тегов/фильтров, ни виджетов (и это есть хреново)
Resume:
	* будем пробовать django-authority
